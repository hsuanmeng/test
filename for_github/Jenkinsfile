emailNotifications = 'metaliu@pershing.com.tw hsuanmeng@pershing.com.tw'
notificationSent    = false

def sendNotification(buildChanged)
{
    if (notificationSent)
    {
        return
    }
    notificationSent = true

    if (currentBuild.currentResult == 'SUCCESS')
    {
        // notify users when the build is back to normal
        mail to: emailNotifications,
            subject: "Build fixed: ${currentBuild.fullDisplayName}",
            body: "The build is back to normal ${env.BUILD_URL}"
    }

    else if ((currentBuild.currentResult == 'FAILURE') && buildChanged)
    {
        // notify users when the Pipeline first fails
        mail to: emailNotifications,
            subject: "Build failed: ${currentBuild.fullDisplayName}",
            body: "Something went wrong with ${env.BUILD_URL}"
    }
    else if ((currentBuild.currentResult == 'FAILURE'))
    {
        // notify users when they check into a broken build
        mail to: emailNotifications,
            subject: "Build failed (again): ${currentBuild.fullDisplayName}",
            body: "Something is still wrong with ${env.BUILD_URL}"
    }
}


pipeline{
    agent none
    stages {
        stage('distribute'){
              parallel{
                    stage('166'){
                        options {
                                timeout(time: 1, unit: 'HOURS')
                                }
                        agent{ node {
                                label 'testingEnv'
                                customWorkspace '/data/workspace/'
                                }
                             }
                        when{expression{/*如果測試失敗，狀態為UNSTABLE*/
                            currentBuild.result == null || currentBuild.result == 'SUCCESS'}}
                        steps {
                            echo "Test On 166"
                            sh 'whoami'
                            sh 'pip install -r /data/workspace/requirements.txt'
                            cucumber fileIncludePattern: '**/*.json', sortingMethod: 'ALPHABETICAL'
                        }
                    }
                    stage('165'){
                        agent{node {
                                label 'testingEnv1'
                                customWorkspace '/data/workspace/'
                                }}
                    steps {
                        echo "Test On 165"
                        echo "install package"
                        sh 'whoami'
                        sh 'pip install -r /data/workspace/requirements.txt --user'
                        }
                        }
                    }
               }
        stage('Cucumber'){
            steps{
                //cucumber fileIncludePattern: '**/*.json', sortingMethod: 'ALPHABETICAL'
                echo 'test behave'
                //sh 'behave'
                //sh 'behave /data/workspace/for_github/tutorial01.feature -f json.pretty -o json_reports/Tuto01.json'
                //sh 'python /data/workspace/for_github/convert2cucumber.py json_reports/Tuto01.json'
            }
        }

    }

    post {
        changed {
            sendNotification buildChanged:true
        }
        failure {
            sendNotification buildChanged:false
        }
    }

}